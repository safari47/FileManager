import asyncio
import time
from typing import Optional

from loguru import logger
from pydantic import BaseModel

from ..celery_app import celery
from ..database import async_session_maker
from ..manager.crud import FileDAO
from ..manager.models import FileStatus
from ..services.sftp import SFTPService


class DownloadedFileUpdateStatus(BaseModel):
    server_id: int
    filename: str
    size: float


class NewDownloadedFile(DownloadedFileUpdateStatus):
    status: FileStatus
    minio_path: Optional[str] = None
    error_message: Optional[str] = None


def update_downloaded_file_info(
    server_id,
    filename,
    size,
    status=FileStatus.NEW.value,
    minio_path=None,
    error_message=None,
    new_status=None,
):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–º —Ñ–∞–π–ª–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    try:

        async def inner():
            try:
                async with async_session_maker() as session:
                    if new_status:
                        file = await FileDAO().find_one_or_none(
                            session=session,
                            filters=DownloadedFileUpdateStatus(
                                server_id=server_id, filename=filename, size=size
                            ),
                        )
                        file.status = new_status
                        session.add(file)
                    else:
                        await FileDAO().add(
                            session=session,
                            values=NewDownloadedFile(
                                server_id=server_id,
                                filename=filename,
                                size=size,
                                status=status,
                                minio_path=minio_path,
                                error_message=error_message,
                            ),
                        )
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ñ–∞–π–ª–µ: {str(e)}")
                return []
            finally:
                await session.commit()

        return asyncio.run(inner())
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏: {str(e)}")
        return []


@celery.task(bind=True, max_retries=10)
def download_file_task(
    self,
    host: str,
    port: int,
    username: str,
    password: str,
    remote_path: str,
    file: dict,
    server_id: int,
):
    start_time = time.time()
    filename = file.get("filename", "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–∞–π–ª")
    file_size_mb = file.get("st_size", 0) / 1024 / 1024

    logger.info(
        f"‚¨áÔ∏è –ó–∞–ø—É—Å–∫ –∑–∞–¥–∞—á–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è {filename} ({file_size_mb} –ú–ë) —Å {host}:{remote_path}"
    )
    update_downloaded_file_info(
        server_id=server_id, filename=filename, size=file_size_mb
    )

    sftp_service = SFTPService(
        host=host,
        port=port,
        username=username,
        password=password,
    )

    result = {
        "success": False,
        "filename": filename,
        "server": host,
        "path": remote_path,
        "size": file.get("st_size", 0),
        "server_id": server_id,
    }

    try:
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ SFTP
        sftp_service.connect()
        logger.debug(f"üîå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ {host} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ {filename}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å —Ñ–∞–π–ª–∞
        if not sftp_service.file_is_stable(remote_path, file):
            logger.warning(
                f"‚ö†Ô∏è –§–∞–π–ª {filename} –Ω–µ—Å—Ç–∞–±–∏–ª–µ–Ω, –±—É–¥–µ—Ç –ø–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –ø–æ–∑–∂–µ"
            )
            self.retry(countdown=30)
            return result

        # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
        update_downloaded_file_info(
            server_id=server_id,
            filename=filename,
            size=file_size_mb,
            status=FileStatus.DOWNLOADING.value,
        )
        download_success = sftp_service.download_file(remote_path, file)

        if download_success:
            update_downloaded_file_info(
                server_id=server_id,
                filename=filename,
                size=file_size_mb,
                status=FileStatus.UPLOADED.value,
            )
            result["success"] = True

            elapsed_time = time.time() - start_time
            download_speed = file_size_mb / elapsed_time if elapsed_time > 0 else 0

            logger.info(
                f"‚úÖ –£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω {filename} "
                f"({file_size_mb:.2f} –ú–ë –∑–∞ {elapsed_time:.1f} —Å–µ–∫, "
                f"{download_speed:.2f} –ú–ë/—Å–µ–∫)"
            )
        else:
            update_downloaded_file_info(
                server_id=server_id,
                filename=filename,
                size=file_size_mb,
                status=FileStatus.RETRY.value,
                error_message="–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞",
            )
            logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª {filename}")
            if self.request.retries < self.max_retries:
                logger.info(f"üîÑ –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–∏ –¥–ª—è {filename}")
                self.retry(countdown=60)

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ {filename}: {str(e)}")
        result["error"] = str(e)
        update_downloaded_file_info(
            server_id=server_id,
            filename=filename,
            size=file_size_mb,
            status=FileStatus.ERROR.value,
            error_message=str(e),
        )
        # –ü–æ–≤—Ç–æ—Ä—è–µ–º –∑–∞–¥–∞—á—É –ø—Ä–∏ –æ—à–∏–±–∫–µ
        if self.request.retries < self.max_retries:
            logger.info(
                f"üîÑ –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–∏ –ø–æ—Å–ª–µ –æ—à–∏–±–∫–∏ –¥–ª—è {filename}"
            )
            self.retry(countdown=60, exc=e)

    finally:
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
        try:
            sftp_service.disconnect()
            logger.debug(f"üîå –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å {host} –∑–∞–∫—Ä—ã—Ç–æ –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ {filename}")
        except Exception as disconnect_err:
            logger.warning(f"‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {str(disconnect_err)}")

    return result
