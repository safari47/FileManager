import asyncio
from collections import defaultdict

from loguru import logger
from pydantic import BaseModel

from ..celery_app import celery
from ..database import async_session_maker
from ..manager.crud import ServerDAO
from ..services.sftp import SFTPService
from .download import download_file_task


class ActiveServer(BaseModel):
    scanning: bool


def get_active_servers():
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    try:

        async def inner():
            try:
                async with async_session_maker() as session:
                    servers = await ServerDAO().find_all(
                        session=session, filters=ActiveServer(scanning=True)
                    )
                    return servers
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–µ—Ä–≤–µ—Ä–æ–≤ –∏–∑ –ë–î: {str(e)}")
                return []

        return asyncio.run(inner())
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏: {str(e)}")
        return []


@celery.task()
def scan_all_servers():
    """–°–∫–∞–Ω–∏—Ä—É–µ—Ç –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–µ—Ä–≤–µ—Ä—ã –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –Ω–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤"""
    total_errors = 0
    processed_servers = 0
    processed_files = 0

    logger.info("üöÄ –ó–∞–ø—É—Å–∫ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Å–µ—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤")

    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤
    servers = get_active_servers()
    if not servers:
        logger.info("‚ÑπÔ∏è –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤ –¥–ª—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è")
        return {"status": "success", "message": "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤"}

    logger.info(f"üìä –ù–∞–π–¥–µ–Ω–æ {len(servers)} –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤ –¥–ª—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è")

    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Å–µ—Ä–≤–µ—Ä—ã –ø–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    union_servers = defaultdict(list)
    for server in servers:
        connection_key = (
            f"{server.host}:{server.port}:{server.username}:{server.password}"
        )
        union_servers[connection_key].append((server.id, server.path))

    for connection_params, server_paths in union_servers.items():
        try:
            host, port, username, password = connection_params.split(":")
            sftp_service = SFTPService(
                host=host,
                port=int(port),
                username=username,
                password=password,
            )
            try:
                sftp_service.connect()
                logger.info(f"üîå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É {host} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
                for server_id, path in server_paths:
                    try:
                        files = sftp_service.scan_directory(path)
                        if files:
                            logger.info(f"üì¶ –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ {len(files)} —Ñ–∞–π–ª–æ–≤ –≤ {path}")
                            for file in files:
                                try:
                                    download_file_task.apply_async(
                                        kwargs={
                                            "host": host,
                                            "port": int(port),
                                            "username": username,
                                            "password": password,
                                            "remote_path": path,
                                            "file": sftp_service.sftp_attr_to_dict(
                                                file
                                            ),
                                            "server_id": server_id,
                                        },
                                        queue="download_queue",
                                    )
                                    processed_files += 1
                                except Exception as e:
                                    logger.error(
                                        f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞—á–∏ –¥–ª—è —Ñ–∞–π–ª–∞ {file.filename}: {str(e)}"
                                    )
                                    total_errors += 1
                        else:
                            logger.info(f"üìÇ –ü—É—Ç—å {path} –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤")
                    except Exception as e:
                        logger.error(
                            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø—É—Ç–∏ {path} –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ {host}: {str(e)}"
                        )
                        total_errors += 1
                processed_servers += 1
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å —Å–µ—Ä–≤–µ—Ä–æ–º {host}: {str(e)}")
                total_errors += 1
            finally:
                try:
                    sftp_service.disconnect()
                except Exception as e:
                    logger.warning(
                        f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞ {host}: {str(e)}"
                    )
        except ValueError as e:
            logger.error(f"‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {str(e)}")
            total_errors += 1
        except Exception as e:
            logger.error(f"‚ùå –ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–µ—Ä–≤–µ—Ä–∞: {str(e)}")
            total_errors += 1
    # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
    result = {
        "status": "success" if total_errors == 0 else "partial_success",
        "servers_total": len(union_servers),
        "servers_processed": processed_servers,
        "files_processed": processed_files,
        "errors": total_errors,
    }

    logger.info(
        f"‚úÖ –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ: –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ {processed_servers}/{len(union_servers)} —Å–µ—Ä–≤–µ—Ä–æ–≤, {processed_files} —Ñ–∞–π–ª–æ–≤, {total_errors} –æ—à–∏–±–æ–∫"
    )
    return result
