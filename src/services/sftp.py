import json
import time
from datetime import date
from pathlib import Path

from loguru import logger
from paramiko import AutoAddPolicy
from paramiko.client import SSHClient
from redis import Redis

from ..config import settings


# –°–µ—Ä–≤–∏—Å –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ SFTP-—Å–µ—Ä–≤–µ—Ä–æ–≤ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –Ω–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤
class SFTPService:
    def __init__(self, host, port, username, password):
        self.host = host
        self.port = port
        self.username = username
        self.password = password
        self.client = SSHClient()
        self.sftp = None
        self.redis = Redis(
            host=settings.REDIS_HOST,
            port=settings.REDIS_PORT,
            db=settings.REDIS_DB,
        )

    def connect(self):
        logger.debug(f"üîí –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ SFTP {self.host}:{self.port}")
        try:
            self.client.load_system_host_keys()
            self.client.set_missing_host_key_policy(AutoAddPolicy())
            self.client.connect(
                hostname=self.host,
                port=self.port,
                username=self.username,
                password=self.password,
            )
            self.sftp = self.client.open_sftp()
            logger.info(f"‚úÖ SFTP —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å {self.host} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
        except Exception as e:
            raise RuntimeError(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ SFTP {self.host}: {e}")

    def disconnect(self) -> None:
        logger.debug(f"üîí –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç SFTP {self.host}")
        try:
            if self.sftp:
                self.sftp.close()
            if self.client:
                self.client.close()
            logger.debug(f"‚úÖ SFTP —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å {self.host} –∑–∞–∫—Ä—ã—Ç–æ")
        except Exception as e:
            raise RuntimeError(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏ –æ—Ç SFTP {self.host}: {e}")

    def _get_cached_files(self, host: str, path: str) -> dict:
        key = f"{host}:{path}"
        cache_data = self.redis.hgetall(key)
        if cache_data:
            result = {k.decode(): json.loads(v) for k, v in cache_data.items()}
            logger.debug(f"üîç –ö–µ—à –Ω–∞–π–¥–µ–Ω –¥–ª—è {key}: {len(result)} —Ñ–∞–π–ª–æ–≤")
            return result
        logger.debug(f"üîç –ö–µ—à –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è {key}")
        return {}

    def _save_files_to_cache(self, host: str, path: str, files: list) -> None:
        key = f"{host}:{path}"
        files_to_save = {
            file.filename: json.dumps({"size": file.st_size, "mtime": file.st_mtime})
            for file in files
        }
        if files_to_save:
            self.redis.hset(key, mapping=files_to_save)
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º TTL –¥–ª—è –∫–µ—à–∞ (7 –¥–Ω–µ–π)
            self.redis.expire(key, 604800)
            logger.debug(f"üíæ –ö–µ—à –æ–±–Ω–æ–≤–ª–µ–Ω –¥–ª—è {key}: {len(files_to_save)} —Ñ–∞–π–ª–æ–≤")

    def _get_new_or_changed_files(self, files: list, cached_files: dict) -> list:
        new_or_changed_files = []
        for file in files:
            cached = cached_files.get(file.filename)
            if (
                not cached
                or cached["size"] != file.st_size
                or cached["mtime"] != file.st_mtime
            ):
                new_or_changed_files.append(file)

        if new_or_changed_files:
            logger.debug(
                f"üÜï –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ {len(new_or_changed_files)} —Ñ–∞–π–ª–∞—Ö"
            )
        return new_or_changed_files

    def scan_directory(self, path: str) -> list:
        if not self.sftp:
            raise RuntimeError(
                f"SFTP —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –ø—Ä–∏ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ {path}"
            )

        logger.info(f"üîç –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ {self.host}:{path}")
        try:
            files = self.sftp.listdir_attr(path)
            if not files:
                logger.info(f"üìÇ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è {path} –ø—É—Å—Ç–∞")
                return []

            logger.debug(f"üìä –ù–∞–π–¥–µ–Ω–æ {len(files)} —Ñ–∞–π–ª–æ–≤ –≤ {path}")
            cached_files = self._get_cached_files(self.host, path)

            if cached_files:
                new_files = self._get_new_or_changed_files(files, cached_files)
                if new_files:
                    logger.info(f"üÜï {len(new_files)} –Ω–æ–≤—ã—Ö/–∏–∑–º–µ–Ω–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –≤ {path}")
                else:
                    logger.info(f"‚úÖ –ù–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ {path}")
                self._save_files_to_cache(self.host, path, files)
                return new_files
            else:
                logger.info(f"üÜï –ü–µ—Ä–≤–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ {path}: {len(files)} —Ñ–∞–π–ª–æ–≤")
                self._save_files_to_cache(self.host, path, files)
                return files
        except Exception as e:
            raise RuntimeError(f"–û—à–∏–±–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è {self.host}:{path}: {e}")

    @staticmethod
    def sftp_attr_to_dict(file):
        return {
            "filename": file.filename,
            "st_size": file.st_size,
            "st_mtime": file.st_mtime,
        }

    def get_local_path(self, host: str, remote_path: str) -> str:
        local_path = (
            Path(settings.LOCAL_DOWNLOAD_PATH)
            / host
            / remote_path.lstrip("/")
            / date.today().isoformat()
        )
        local_path.mkdir(parents=True, exist_ok=True)
        logger.debug(f"üìÅ –ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏: {local_path}")
        return str(local_path)

    def file_is_stable(self, path: str, file: dict, sleep: int = 10) -> bool:
        filename = file["filename"]
        logger.debug(f"‚è±Ô∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏ —Ñ–∞–π–ª–∞ {filename}")
        try:
            first_stat = self.sftp.stat(f"{path}/{filename}")
            time.sleep(sleep)
            second_stat = self.sftp.stat(f"{path}/{filename}")
            return (
                first_stat.st_size == second_stat.st_size
                and first_stat.st_mtime == second_stat.st_mtime
            )
        except Exception as e:
            raise RuntimeError(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏ {filename}: {e}")

    def download_file(self, remote_path: str, file: dict) -> bool:
        if not self.sftp:
            raise RuntimeError("SFTP —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
        filename = file["filename"]
        try:
            local_path = self.get_local_path(self.host, remote_path)
            if not self.file_is_stable(path=remote_path, file=file):
                logger.warning(f"‚ö†Ô∏è –§–∞–π–ª {filename} –Ω–µ—Å—Ç–∞–±–∏–ª–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
                return False
            logger.info(
                f"‚¨áÔ∏è –ó–∞–≥—Ä—É–∑–∫–∞: {remote_path}/{filename} ‚Üí {local_path}/{filename}"
            )
            self.sftp.get(
                remotepath=f"{remote_path}/{filename}",
                localpath=f"{local_path}/{filename}",
            )
            logger.info(
                f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω —Ñ–∞–π–ª {filename} ({file['st_size']/1024/1024:.2f} –ú–ë)"
            )
            return True
        except Exception as e:
            raise RuntimeError(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ {filename}: {e}")
